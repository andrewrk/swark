#!/usr/bin/env python

import os, sys
import subprocess
import optparse
import tempfile

def which(executable, path=None):
    """Try to find 'executable' in the directories listed in 'path' (a
    string listing directories separated by 'os.pathsep'; defaults to
    os.environ['PATH']).  Returns the complete filename or None if not
    found
    """
    if path is None:
        path = os.environ['PATH']
    paths = path.split(os.pathsep)
    extlist = ['']
    if os.name == 'os2':
        (base, ext) = os.path.splitext(executable)
        # executable files on OS/2 can have an arbitrary extension, but
        # .exe is automatically appended if no dot is present in the name
        if not ext:
            executable = executable + ".exe"
    elif sys.platform == 'win32':
        pathext = os.environ['PATHEXT'].lower().split(os.pathsep)
        (base, ext) = os.path.splitext(executable)
        if ext.lower() not in pathext:
            extlist = pathext
    for ext in extlist:
        execname = executable + ext
        if os.path.isfile(execname):
            return execname
        else:
            for p in paths:
                f = os.path.join(p, execname)
                if os.path.isfile(f):
                    return f
    else:
        return None


def superwalk(folder):
    for dirpath, _dirnames, filenames in os.walk(folder):
        for filename in filenames:
            yield os.path.join(dirpath, filename)

def absolute(relative_path):
    return os.path.abspath(os.path.join(os.path.dirname(__file__), '..', relative_path))

def execute_asm_code(asm_code):
    "execute asm_code and return stdout"
    exe = 'bin/dcpu16exec'

    # save asm_code to a file
    handle = tempfile.NamedTemporaryFile(suffix=".dasm", delete=False)
    handle.write(asm_code)
    handle.close()
    process = subprocess.Popen([exe, handle.name], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    try:
        os.remove(handle.name)
    except:
        pass

    return (stdout, stderr, process.returncode)

def main():
    parser = optparse.OptionParser()
    parser.add_option('-f', '--failfast', help="Stop on first failed test", action="store_true")
    parser.add_option("-q", "--quiet", help="only print dots and summary", action="store_true")
    parser.add_option("-b", "--backwards", help="run tests in reverse order", action="store_true")
    parser.add_option("-v", "--verbose", action="store_true", default=False)
    options, args = parser.parse_args()

    if not options.quiet:
        print("Loading test suite...")

    tests = {}
    for f in superwalk("test/"):
        if f.find("/_") != -1:
            continue
        if f.endswith('.swark.err'):
            test_name = f[:-len('.swark.err')]
            ext = '.swark.err'
        elif f.endswith('.swark'):
            test_name = f[:-len('.swark')]
            ext = '.swark'
        elif f.endswith('.swark.out'):
            test_name = f[:-len('.swark.out')]
            ext = '.swark.out'
        else:
            continue

        if not tests.has_key(test_name):
            tests[test_name] = {}

        if ext == '.swark.err':
            compiler_output = open(absolute(f), 'r').read()
            tests[test_name]['errors'] = compiler_output.replace('Errors detected. Exiting.\n', '')
        elif ext == '.swark.out':
            expected_output = open(absolute(f), 'r').read()
            tests[test_name]['out'] = expected_output
        else: # ext == '.swark'
            tests[test_name]['source'] = open(absolute(f), 'r').read()

    fails = []
    compiler_exe = absolute('bin/swark')
    passed = 0
    test_list = sorted(tests.iteritems())
    if options.backwards:
        test_list.reverse()

    # complain about missing files before showing progress
    for test_name, test in test_list:
        if not test.has_key('source'):
            sys.exit("%s missing source" % test_name)
            continue
        if not test.has_key('errors'):
            test['errors'] = ''
        if not test.has_key('out'):
            test['out'] = ''

    for test_name, test in test_list:
        def add_fail(message, letter, long_message):
            if options.verbose:
                sys.stdout.write(message + "\n")
            else:
                sys.stdout.write(letter)
            fails.append({'name': test_name, 'message': long_message})
        fail_count = len(fails)

        def can_haz_goto():
            # try compiling the test file
            if options.verbose:
                sys.stdout.write(test_name + "...")
                sys.stdout.flush()
            compiler = subprocess.Popen([compiler_exe, '-s'], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            compiler_stdout, compiler_stderr = compiler.communicate(test['source'])

            normal_behavior = compiler.returncode == 0 or \
                              (compiler.returncode == 1 and compiler_stderr != "")
            if not normal_behavior:
                return add_fail("compiler crash", "C", """\
---- Compiler stdout: ----
%s\
---- Compiler stderr: ----
%s\
--------
The compiler exited with returncode %i\
""" % (compiler_stdout, compiler_stderr, compiler.returncode))

            if compiler_stderr != test['errors']:
                return add_fail("wrong compiler stderr", "F", """\
---- Compiler stderr: ----
%s\
---- Expected stderr: ----
%s\
--------""" % (compiler_stderr, test['errors']))

            # compiler phase looks good, now test the generated code
            (run_output, run_stderr, run_returncode) = execute_asm_code(compiler_stdout)

            if run_returncode != 0 or run_stderr != "":
                return add_fail("run program crashed", "R", """\
---- Run Program stdout: ----
%s\
---- Run Program stderr: ----
%s\
--------
Run program exited with returncode %i\
""" % (run_output, run_stderr, run_returncode))

            if run_output != test['out']:
                return add_fail("wrong run output", "W", """\
---- Run Program stdout: ----
%s\
---- Expected Program stdout: ----
%s\
--------""" % (run_output, test['out']))

        can_haz_goto()
        if len(fails) == fail_count:
            # must have been a pass
            if options.verbose:
                sys.stdout.write("pass\n")
            else:
                sys.stdout.write('.')
            passed += 1
        sys.stdout.flush()
        if len(fails) != 0 and options.failfast:
            break

    if len(fails) > 0:
        if not options.quiet:
            print("\n=========================================")
            for fail in fails:
                print("Test name: %(name)s\n%(message)s" % fail)
                print("=========================================")
        print("\n%i tests passed, %i tests failed." % (passed, len(fails)))
    else:
        print("\nAll %i tests passed." % passed)

if __name__ == "__main__":
    main()

